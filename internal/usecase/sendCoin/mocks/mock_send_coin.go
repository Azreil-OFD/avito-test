// Code generated by MockGen. DO NOT EDIT.
// Source: sendCoin/send_coin.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/Azreil-OFD/Avito-test/internal/infrastructure/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockSendCoinRepository is a mock of SendCoinRepository interface.
type MockSendCoinRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSendCoinRepositoryMockRecorder
}

// MockSendCoinRepositoryMockRecorder is the mock recorder for MockSendCoinRepository.
type MockSendCoinRepositoryMockRecorder struct {
	mock *MockSendCoinRepository
}

// NewMockSendCoinRepository creates a new mock instance.
func NewMockSendCoinRepository(ctrl *gomock.Controller) *MockSendCoinRepository {
	mock := &MockSendCoinRepository{ctrl: ctrl}
	mock.recorder = &MockSendCoinRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendCoinRepository) EXPECT() *MockSendCoinRepositoryMockRecorder {
	return m.recorder
}

// AddCoins mocks base method.
func (m *MockSendCoinRepository) AddCoins(ctx context.Context, userID, amount int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCoins", ctx, userID, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCoins indicates an expected call of AddCoins.
func (mr *MockSendCoinRepositoryMockRecorder) AddCoins(ctx, userID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCoins", reflect.TypeOf((*MockSendCoinRepository)(nil).AddCoins), ctx, userID, amount)
}

// CreateTransaction mocks base method.
func (m *MockSendCoinRepository) CreateTransaction(ctx context.Context, senderID, receiverID, amount int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", ctx, senderID, receiverID, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockSendCoinRepositoryMockRecorder) CreateTransaction(ctx, senderID, receiverID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockSendCoinRepository)(nil).CreateTransaction), ctx, senderID, receiverID, amount)
}

// DeductCoins mocks base method.
func (m *MockSendCoinRepository) DeductCoins(ctx context.Context, userID, amount int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeductCoins", ctx, userID, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeductCoins indicates an expected call of DeductCoins.
func (mr *MockSendCoinRepositoryMockRecorder) DeductCoins(ctx, userID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeductCoins", reflect.TypeOf((*MockSendCoinRepository)(nil).DeductCoins), ctx, userID, amount)
}

// GetUserByID mocks base method.
func (m *MockSendCoinRepository) GetUserByID(ctx context.Context, userID int) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, userID)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockSendCoinRepositoryMockRecorder) GetUserByID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockSendCoinRepository)(nil).GetUserByID), ctx, userID)
}

// GetUserByUsername mocks base method.
func (m *MockSendCoinRepository) GetUserByUsername(ctx context.Context, username string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", ctx, username)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockSendCoinRepositoryMockRecorder) GetUserByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockSendCoinRepository)(nil).GetUserByUsername), ctx, username)
}

// MocktrManager is a mock of trManager interface.
type MocktrManager struct {
	ctrl     *gomock.Controller
	recorder *MocktrManagerMockRecorder
}

// MocktrManagerMockRecorder is the mock recorder for MocktrManager.
type MocktrManagerMockRecorder struct {
	mock *MocktrManager
}

// NewMocktrManager creates a new mock instance.
func NewMocktrManager(ctrl *gomock.Controller) *MocktrManager {
	mock := &MocktrManager{ctrl: ctrl}
	mock.recorder = &MocktrManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktrManager) EXPECT() *MocktrManagerMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MocktrManager) Do(ctx context.Context, fn func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// Do indicates an expected call of Do.
func (mr *MocktrManagerMockRecorder) Do(ctx, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MocktrManager)(nil).Do), ctx, fn)
}
